# Log everything to a per host daily logfile
$template DailyPerHostLogs,"/opt/rsyslog/hosts/%$YEAR%/%$MONTH%/%$DAY%/%HOSTNAME%/messages.log"
*.* -?DailyPerHostLogs

# Template for hostname-based log files
# $template RemoteHostLogfile,"/var/log/rsyslog.log"

# Template for service name-based log files
$template ServiceLogfile,"/opt/rsyslog/%programname%/%programname%.log"

# Route messages from defined remote hosts into log files based on
# the name of the remote host. The parts of this rule are:
# - ":" indicates that this is a property-based filter (traditionally
#   the filter would be a severity/facility based selector)
# - "hostname" names the property whose value should be examined
# - "," a simple separator
# - "ereregex" indicates the compare-operation, in this case that the
#   property value should be compared against an extended regular
#   expression (another compare-operation is "isequal")
# - "," a simple separator
# - "(host1|host2|...)" the regular expression to compare against
# - "?" indicates that the action is a dynamic filename (as opposed
#   to static files that must be specified starting with a "/")
# - "RemoteHostLogfile" is the name of the template that must be
#   evaluated to get the actual filename
# - "&" on a new line indicates that for the same filter rule there
#   is another action coming up
# - "~" is the "discard" action, i.e. the message is not processed
#   any further
# :hostname, ereregex, "(thor|twig|nori)" ?RemoteHostLogfile
# & ~

# Route messages from defined services into log files based on
# the name of the service. See above for a detailed discussion of
# the parts of this rule.
:programname, ereregex, "(named|dhcpd|hddtemp|collectd|slapd|imapd|unicorn|riak|redis|apache|god|haproxy)" ?ServiceLogfile
& ~
